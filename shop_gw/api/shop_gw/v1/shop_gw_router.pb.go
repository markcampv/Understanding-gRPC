// Code generated by https://github.com/zhufuyi/sponge, DO NOT EDIT.

package v1

import (
	context "context"
	gin "github.com/gin-gonic/gin"
	errcode "github.com/zhufuyi/sponge/pkg/errcode"
	middleware "github.com/zhufuyi/sponge/pkg/gin/middleware"
	zap "go.uber.org/zap"
	strings "strings"
)

// import packages: strings. context. errcode. middleware. zap. gin.

type ShopGwLogicer interface {
	GetDetailsByProductID(ctx context.Context, req *GetDetailsByProductIDRequest) (*GetDetailsByProductIDReply, error)
}

type ShopGwOption func(*shopGwOptions)

type shopGwOptions struct {
	isFromRPC  bool
	responser  errcode.Responser
	zapLog     *zap.Logger
	httpErrors []*errcode.Error
	rpcStatus  []*errcode.RPCStatus
	wrapCtxFn  func(c *gin.Context) context.Context
}

func (o *shopGwOptions) apply(opts ...ShopGwOption) {
	for _, opt := range opts {
		opt(o)
	}
}

func WithShopGwHTTPResponse() ShopGwOption {
	return func(o *shopGwOptions) {
		o.isFromRPC = false
	}
}

func WithShopGwRPCResponse() ShopGwOption {
	return func(o *shopGwOptions) {
		o.isFromRPC = true
	}
}

func WithShopGwResponser(responser errcode.Responser) ShopGwOption {
	return func(o *shopGwOptions) {
		o.responser = responser
	}
}

func WithShopGwLogger(zapLog *zap.Logger) ShopGwOption {
	return func(o *shopGwOptions) {
		o.zapLog = zapLog
	}
}

func WithShopGwErrorToHTTPCode(e ...*errcode.Error) ShopGwOption {
	return func(o *shopGwOptions) {
		o.httpErrors = e
	}
}

func WithShopGwRPCStatusToHTTPCode(s ...*errcode.RPCStatus) ShopGwOption {
	return func(o *shopGwOptions) {
		o.rpcStatus = s
	}
}

func WithShopGwWrapCtx(wrapCtxFn func(c *gin.Context) context.Context) ShopGwOption {
	return func(o *shopGwOptions) {
		o.wrapCtxFn = wrapCtxFn
	}
}

func RegisterShopGwRouter(
	iRouter gin.IRouter,
	groupPathMiddlewares map[string][]gin.HandlerFunc,
	singlePathMiddlewares map[string][]gin.HandlerFunc,
	iLogic ShopGwLogicer,
	opts ...ShopGwOption) {

	o := &shopGwOptions{}
	o.apply(opts...)

	if o.responser == nil {
		o.responser = errcode.NewResponser(o.isFromRPC, o.httpErrors, o.rpcStatus)
	}
	if o.zapLog == nil {
		o.zapLog, _ = zap.NewProduction()
	}

	r := &shopGwRouter{
		iRouter:               iRouter,
		groupPathMiddlewares:  groupPathMiddlewares,
		singlePathMiddlewares: singlePathMiddlewares,
		iLogic:                iLogic,
		iResponse:             o.responser,
		zapLog:                o.zapLog,
		wrapCtxFn:             o.wrapCtxFn,
	}
	r.register()
}

type shopGwRouter struct {
	iRouter               gin.IRouter
	groupPathMiddlewares  map[string][]gin.HandlerFunc
	singlePathMiddlewares map[string][]gin.HandlerFunc
	iLogic                ShopGwLogicer
	iResponse             errcode.Responser
	zapLog                *zap.Logger
	wrapCtxFn             func(c *gin.Context) context.Context
}

func (r *shopGwRouter) register() {
	r.iRouter.Handle("GET", "/api/v1/detail", r.withMiddleware("GET", "/api/v1/detail", r.GetDetailsByProductID_0)...)

}

func (r *shopGwRouter) withMiddleware(method string, path string, fn gin.HandlerFunc) []gin.HandlerFunc {
	handlerFns := []gin.HandlerFunc{}

	// determine if a route group is hit or miss, left prefix rule
	for groupPath, fns := range r.groupPathMiddlewares {
		if groupPath == "" || groupPath == "/" {
			handlerFns = append(handlerFns, fns...)
			continue
		}
		size := len(groupPath)
		if len(path) < size {
			continue
		}
		if groupPath == path[:size] {
			handlerFns = append(handlerFns, fns...)
		}
	}

	// determine if a single route has been hit
	key := strings.ToUpper(method) + "->" + path
	if fns, ok := r.singlePathMiddlewares[key]; ok {
		handlerFns = append(handlerFns, fns...)
	}

	return append(handlerFns, fn)
}

func (r *shopGwRouter) GetDetailsByProductID_0(c *gin.Context) {
	req := &GetDetailsByProductIDRequest{}
	var err error

	if err = c.ShouldBindQuery(req); err != nil {
		r.zapLog.Warn("ShouldBindQuery error", zap.Error(err), middleware.GCtxRequestIDField(c))
		r.iResponse.ParamError(c, err)
		return
	}

	var ctx context.Context
	if r.wrapCtxFn != nil {
		ctx = r.wrapCtxFn(c)
	} else {
		ctx = c
	}

	out, err := r.iLogic.GetDetailsByProductID(ctx, req)
	if err != nil {
		r.iResponse.Error(c, err)
		return
	}

	r.iResponse.Success(c, out)
}
