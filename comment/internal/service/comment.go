// Code generated by https://github.com/zhufuyi/sponge

package service

import (
	"context"

	commentV1 "comment/api/comment/v1"
	"comment/internal/ecode"

	"github.com/zhufuyi/sponge/pkg/grpc/interceptor"
	"github.com/zhufuyi/sponge/pkg/logger"

	"google.golang.org/grpc"
)

func init() {
	registerFns = append(registerFns, func(server *grpc.Server) {
		commentV1.RegisterCommentServer(server, NewCommentServer())
	})
}

var _ commentV1.CommentServer = (*comment)(nil)

type comment struct {
	commentV1.UnimplementedCommentServer

	// example:
	//		iDao dao.CommentDao
}

// NewCommentServer create a server
func NewCommentServer() commentV1.CommentServer {
	return &comment{
		// example:
		//		iDao: dao.NewCommentDao(
		//			model.GetDB(),
		//			cache.NewCommentCache(model.GetCacheType()),
		//		),
	}
}

// ListByProductID list of comments by product id
func (s *comment) ListByProductID(ctx context.Context, req *commentV1.ListByProductIDRequest) (*commentV1.ListByProductIDReply, error) {
	err := req.Validate()
	if err != nil {
		logger.Warn("req.Validate error", logger.Err(err), logger.Any("req", req), interceptor.ServerCtxRequestIDField(ctx))
		return nil, ecode.StatusInvalidParams.Err()
	}

	// fill in the business logic code here

	return &commentV1.ListByProductIDReply{
		Total:     3,
		ProductID: 1,
		CommentDetails: []*commentV1.CommentDetail{
			{
				Id:       1,
				Username: "Mr Zhang",
				Content:  "good",
			},
			{
				Id:       2,
				Username: "Mr Li",
				Content:  "good",
			},
			{
				Id:       3,
				Username: "Mr Wang",
				Content:  "not good",
			},
		},
	}, nil
}
