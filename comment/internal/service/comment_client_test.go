// Code generated by https://github.com/zhufuyi/sponge

package service

import (
	"context"
	"encoding/json"
	"fmt"
	"testing"
	"time"

	commentV1 "comment/api/comment/v1"
	"comment/configs"
	"comment/internal/config"

	"github.com/zhufuyi/sponge/pkg/grpc/benchmark"
)

// Test each method of comment via the rpc client
func Test_service_comment_methods(t *testing.T) {
	conn := getRPCClientConnForTest()
	cli := commentV1.NewCommentClient(conn)
	ctx, _ := context.WithTimeout(context.Background(), time.Second*5)

	tests := []struct {
		name    string
		fn      func() (interface{}, error)
		wantErr bool
	}{
		{
			name: "ListByProductID",
			fn: func() (interface{}, error) {
				// todo type in the parameters to test
				req := &commentV1.ListByProductIDRequest{
					ProductID: 0, 
				}
				return cli.ListByProductID(ctx, req)
			},
			wantErr: false,
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, err := tt.fn()
			if (err != nil) != tt.wantErr {
				t.Errorf("test '%s' error = %v, wantErr %v", tt.name, err, tt.wantErr)
				return
			}
			data, _ := json.MarshalIndent(got, "", "    ")
			fmt.Println(string(data))
		})
	}
}

// Perform a stress test on comment's method and 
// copy the press test report to your browser when you are finished.
func Test_service_comment_benchmark(t *testing.T) {
	err := config.Init(configs.Path("comment.yml"))
	if err != nil {
		panic(err)
	}
	host := fmt.Sprintf("127.0.0.1:%d", config.Get().Grpc.Port)
	protoFile := configs.Path("../api/comment/v1/comment.proto")
	// If third-party dependencies are missing during the press test,
	// copy them to the project's third_party directory.
	importPaths := []string{
		configs.Path("../third_party"), // third_party directory
		configs.Path(".."),             // Previous level of third_party
	}

	tests := []struct {
		name    string
		fn      func() error
		wantErr bool
	}{
		{
			name: "ListByProductID",
			fn: func() error {
				// todo type in the parameters to test
				message := &commentV1.ListByProductIDRequest{
					ProductID: 0, 
				}
				var total uint = 1000 // total number of requests
				b, err := benchmark.New(host, protoFile, "ListByProductID", message, total, importPaths...)
				if err != nil {
					return err
				}
				return b.Run()
			},
			wantErr: false,
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			err := tt.fn()
			if (err != nil) != tt.wantErr {
				t.Errorf("test '%s' error = %v, wantErr %v", tt.name, err, tt.wantErr)
				return
			}
		})
	}
}
